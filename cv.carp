(load "glcv.carp")

(defmodule CV
  (defn key-name [k]
    (from-cstr (Unsafe.coerce (GLCV.key-name k))))
  (implements str CV.key-name)
  (implements prn CV.key-name)

  (deftype Event
    (None [])
    (Init [])
    (Term [])
    (GLInit [])
    (GLTerm [])
    (Close [])
    (Update [])
    (Down [Key])
    (Up [Key])
    (Unicode [Char])
    (Motion [Int Int])
    (Resize [Int Int])
    )

  (sig event-string (Fn [Event] String))
  (defn event-string [e]
    (match e
         (CV.Event.None) @"(None)"
         (CV.Event.Init) @"(Init)"
         (CV.Event.Term) @"(Term)"
         (CV.Event.GLInit) @"(GLInit)"
         (CV.Event.GLTerm) @"(GLTerm)"
         (CV.Event.Close) @"(Close)"
         (CV.Event.Update) @"(Update)"
         (CV.Event.Down k) (concat &[@"(Down " (str k) @")"])
         (CV.Event.Up k) (concat &[@"(Up " (str k) @")"])
         (CV.Event.Unicode c) (concat &[@"(Unicode " (str c) @")"])
         (CV.Event.Motion x y) (concat &[@"(Motion " (str x) @" " (str y) @")"])
         (CV.Event.Resize x y) (concat &[@"(Resize " (str x) @" " (str y) @")"])
         ))
  (implements str CV.event-string)
  (implements prn CV.event-string)


  (sig translate (Fn [(Ref Ev)] Event))
  (defn translate [e]
    (case (GLCV.event-type e)
      CVE.INIT (CV.Event.Init)
      CVE.TERM (CV.Event.Term)
      CVE.GLINIT (CV.Event.GLInit)
      CVE.GLTERM (CV.Event.GLTerm)
      CVE.CLOSE (CV.Event.Close)
      CVE.UPDATE (CV.Event.Update)
      CVE.DOWN (CV.Event.Down (GLCV.event-which e))
      CVE.UP (CV.Event.Up (GLCV.event-which e))
      CVE.UNICODE (CV.Event.Unicode (GLCV.event-unicode e))
      CVE.MOTION (CV.Event.Motion (GLCV.event-x e) (GLCV.event-y e))
      (CV.Event.None)
      ))

  (sig handler (Fn [Event] ()))
  (def handler (fn [e] ()))

  (defn-do run [handle]
    (set! handler handle)
    (GLCV.run (fn [e] (do
                        (handler (translate e))
                        (Int64.zero)))))
  )
